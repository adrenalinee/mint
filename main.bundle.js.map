{"version":3,"file":"main.bundle.js","sources":["webpack:///./src/demo/app/app.service.ts","webpack:///./src/mintClient/src/builder-dialog/builder-dialog.component.ts","webpack:///./src/mintClient/src/expansions/text-html-viewer/text-html-viewer.component.ts","webpack:///./src/mintClient/src/http-response/http-response.component.ts","webpack:///./src/demo/app/environment.ts","webpack:///./src/demo/app/multi-client/multi-client-tab.component.ts","webpack:///./src/demo/app/single-client/single-client.component.ts","webpack:///./src/mintClient/src/expansions/DefaultRequestExpansionBuilder.ts","webpack:///./src/mintClient/src/expansions/authorization-basic/authorization-basic.component.ts","webpack:///./src/mintClient/src/expansions/text-plain/text-plain.component.ts","webpack:///./src/mintClient/src/expansions/xwww-form-urlencoded/xwww-form-urlencoded.component.ts","webpack:///./src/mintClient/src/http-client-tab/http-client-tab.component.ts","webpack:///./src/mintClient/src/requestExpansions.ts","webpack:///./src/mintClient/src/response-body-basic/response-body-basic.component.ts","webpack:///./src/my-lib/src/my-lib.service.ts","webpack:///./src/mintClient/src/requestViews.ts","webpack:///./src lazy","webpack:///./src/demo/app/index.ts","webpack:///./src/demo/app/app.component.ts","webpack:///./src/demo/app/app.module.ts","webpack:///./src/demo/app/app.resolver.ts","webpack:///./src/demo/app/app.routes.ts","webpack:///./src/demo/app/components/header.component.ts","webpack:///./src/demo/app/detail/detail.component.ts","webpack:///./src/demo/app/home/home.component.ts","webpack:///./src/demo/app/home/index.ts","webpack:///./src/demo/app/no-content/index.ts","webpack:///./src/demo/app/no-content/no-content.component.ts","webpack:///./src/demo/main.browser.ts","webpack:///./src/mintClient/src/http-client.service.ts","webpack:///./src/mintClient/src/http-client/http-client.component.ts","webpack:///./src/mintClient/src/http-request/http-request.component.ts","webpack:///./src/mintClient/src/httpClientConfig.ts","webpack:///./src/mintClient/src/httpClientsPreference.ts","webpack:///./src/mint-client/src/index.ts","webpack:///./src/mint-client/src/mint-client.module.ts","webpack:///./src/mintClient/src/name-values/name-values.component.ts","webpack:///./src/mintClient/src/request-body/request-body.component.ts","webpack:///./src/my-lib/src/index.ts","webpack:///./src/my-lib/src/module.ts","webpack:///./src/my-lib/src/my-lib.component.ts","webpack:///./src/demo/styles/styles.scss","webpack:///./src/my-lib/src/my-lib.component.scss","webpack:///./src/demo/app/app.component.css","webpack:///./src/demo/app/home/home.component.css","webpack:///./src/demo/styles/headings.css","webpack:///./src/mint-client/src/expansions/authorization-basic/authorization-basic.component.css","webpack:///./src/mint-client/src/expansions/text-html-viewer/text-html-viewer.component.css","webpack:///./src/mint-client/src/expansions/text-plain/text-plain.component.css","webpack:///./src/mint-client/src/expansions/xwww-form-urlencoded/xwww-form-urlencoded.component.css","webpack:///./src/mint-client/src/request-body/request-body.component.css","webpack:///./src/mint-client/src/response-body-basic/response-body-basic.component.css","webpack:///./src/demo/app/home/home.component.html","webpack:///./src/mint-client/src/builder-dialog/builder-dialog.component.html","webpack:///./src/mint-client/src/expansions/authorization-basic/authorization-basic.component.html","webpack:///./src/mint-client/src/expansions/text-html-viewer/text-html-viewer.component.html","webpack:///./src/mint-client/src/expansions/text-plain/text-plain.component.html","webpack:///./src/mint-client/src/expansions/xwww-form-urlencoded/xwww-form-urlencoded.component.html","webpack:///./src/mint-client/src/http-client-tab/http-client-tab.component.html","webpack:///./src/mint-client/src/http-client/http-client.component.html","webpack:///./src/mint-client/src/http-request/http-request.component.html","webpack:///./src/mint-client/src/http-response/http-response.component.html","webpack:///./src/mint-client/src/name-values/name-values.component.html","webpack:///./src/mint-client/src/request-body/request-body.component.html","webpack:///./src/mint-client/src/response-body-basic/response-body-basic.component.html","webpack:///./src/my-lib/src/my-lib.component.html","webpack:///./src/demo/styles/styles.scss?694e","webpack:///./src/demo/styles/headings.css?de97","webpack:///./src/my-lib/src/my-lib.component.scss?383b","webpack:///./src/demo/app/app.component.css?ceb6","webpack:///./src/demo/app/home/home.component.css?0e26","webpack:///./src/mint-client/src/expansions/authorization-basic/authorization-basic.component.css?6981","webpack:///./src/mint-client/src/expansions/text-html-viewer/text-html-viewer.component.css?6f98","webpack:///./src/mint-client/src/expansions/text-plain/text-plain.component.css?ca75","webpack:///./src/mint-client/src/expansions/xwww-form-urlencoded/xwww-form-urlencoded.component.css?a26d","webpack:///./src/mint-client/src/request-body/request-body.component.css?2ccd","webpack:///./src/mint-client/src/response-body-basic/response-body-basic.component.css?3955"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface InternalStateType {\n  [key: string]: any;\n};\n\n@Injectable()\nexport class AppState {\n\n  public _state: InternalStateType = { };\n\n  /**\n   * Already return a clone of the current state.\n   */\n  public get state() {\n    return this._state = this._clone(this._state);\n  }\n  /**\n   * Never allow mutation\n   */\n  public set state(value) {\n    throw new Error('do not mutate the `.state` directly');\n  }\n\n  public get(prop?: any) {\n    /**\n     * Use our state getter for the clone.\n     */\n    const state = this.state;\n    return state.hasOwnProperty(prop) ? state[prop] : state;\n  }\n\n  public set(prop: string, value: any) {\n    /**\n     * Internally mutate our state.\n     */\n    return this._state[prop] = value;\n  }\n\n  private _clone(object: InternalStateType) {\n    /**\n     * Simple object clone.\n     */\n    return JSON.parse(JSON.stringify( object ));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/app.service.ts","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material';\nimport { RequestExpander } from '../requestExpansions';\n\n@Component({\n  selector: 'app-builder-dialog',\n  template: require('./builder-dialog.component.html'),\n})\nexport class BuilderDialogComponent implements OnInit {\n  expanderView: ExpanderView;\n\n  constructor(\n    private dialog: MatDialog,\n    private dialogRef: MatDialogRef<BuilderDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) private data: any) { }\n\n  ngOnInit() {\n    this.expanderView = new ExpanderView();\n    this.expanderView.title = this.data.title;\n    this.expanderView.expanders = this.data.expanders;\n    this.expanderView.selectedExpander = this.data.selectedExpander;\n  }\n\n  openBuilder() {\n    const selectedBuilder: RequestExpander = this.expanderView.selectedExpander;\n    if (selectedBuilder.component == null) {\n      console.warn('not registered builder component!!');\n      return;\n    }\n\n    this.dialog.open(selectedBuilder.component, {\n      disableClose: true,\n      data: {\n        viewModel: selectedBuilder.viewModel\n      }\n    })\n    .afterClosed()\n    .subscribe(data => {\n      if (data != null) {\n        selectedBuilder.viewModel = data.viewModel;\n        this.dialogRef.close({\n          value: data.value,\n          selectedExpander: this.expanderView.selectedExpander\n        });\n      }\n    });\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n}\n\nexport class ExpanderView {\n  title: string;\n  selectedExpander: RequestExpander;\n  expanders: Array<RequestExpander>;\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/builder-dialog/builder-dialog.component.ts","import { Component, OnInit, Input, Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { BodyViewerComponent } from '../../requestExpansions';\nimport { RequestView } from '../../requestViews';\n\n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n  constructor(private domSanitizer: DomSanitizer) { }\n\n  transform(value: any, ...args: any[]): any {\n    return this.domSanitizer.bypassSecurityTrustHtml(value);\n  }\n}\n\n@Component({\n  selector: 'app-text-html-viewer',\n  template: require('./text-html-viewer.component.html'),\n  styles: [require('./text-html-viewer.component.css')]\n})\nexport class TextHtmlViewerComponent implements BodyViewerComponent, OnInit {\n  @Input() requestView: RequestView;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/expansions/text-html-viewer/text-html-viewer.component.ts","import { Component, OnInit, Input, ComponentFactoryResolver, Directive, ViewContainerRef, ViewChild } from '@angular/core';\nimport { BodyViewerComponent, RequestExpander, RequestExpansion } from '../requestExpansions';\nimport { RequestStatus, RequestView, ResponseInfo } from '../requestViews';\nimport { ResponseBodyBasicComponent } from '../response-body-basic/response-body-basic.component';\nimport { isUndefined } from 'util';\n\n@Directive({\n    selector: '[body-viewer-host]'\n})\nexport class BodyViewerHostDirective implements OnInit {\n    @Input() bodyViewer: RequestExpander;\n    @Input() requestView: RequestView;\n\n    constructor(private componentFactoryResolver: ComponentFactoryResolver,\n                public viewContainerRef: ViewContainerRef) {\n    }\n\n    ngOnInit() {\n        const componentFactory =\n            this.componentFactoryResolver.resolveComponentFactory(this.bodyViewer.component);\n\n        const componentRef = this.viewContainerRef.createComponent(componentFactory);\n        (<BodyViewerComponent> componentRef.instance).requestView = this.requestView;\n    }\n}\n\n@Component({\n    selector: 'app-http-response',\n    template: require('./http-response.component.html'),\n})\nexport class HttpResponseComponent implements OnInit {\n    RequestStatus: any = RequestStatus;\n\n    @Input() requestView: RequestView;\n    @Input() requestExpansions: RequestExpansion[];\n\n    @ViewChild(BodyViewerHostDirective)\n    bodyViewerHost: BodyViewerHostDirective;\n\n    resBodyVeiwers: Map<string, RequestExpander>[];\n    matchedResBodyViewers: RequestExpander[];\n\n    basicResBodyViewer: RequestExpander;\n    selectedBodyViewer: RequestExpander;\n\n    constructor(private componentFactoryResolver: ComponentFactoryResolver) {\n    }\n\n    ngOnInit() {\n        this.basicResBodyViewer = new RequestExpander('Basic', ResponseBodyBasicComponent);\n\n        this.resBodyVeiwers = this.requestExpansions.map(requestExpansion => requestExpansion.resBodyVeiwers);\n    }\n\n    /**\n     * http response 정보를 입력받아서 화면에 그려준다.\n     * http request component가 이 메서드를 호출한다.\n     * @param responseInfo\n     */\n    handleResponse(responseInfo: ResponseInfo) {\n        console.log('handleResponse');\n\n        this.requestView.response = responseInfo;\n        this.requestView.requestStatus = RequestStatus.SendSuccess;\n\n        responseInfo.headers\n            .filter(h => h.name.toLocaleLowerCase() === 'content-type')\n            .forEach(h => {\n                console.log(h.value);\n                if (h.value.startsWith('application/json')) {\n                    this.requestView.resDisplayMode = 'json';\n                    this.requestView.resContentType = 'application/json';\n                } else if (h.value.startsWith('application/xml')) {\n                    this.requestView.resDisplayMode = 'xml';\n                    this.requestView.resContentType = 'application/xml';\n                } else if (h.value.startsWith('text/xml')) {\n                    this.requestView.resDisplayMode = 'xml';\n                    this.requestView.resContentType = 'text/xml';\n                } else if (h.value.startsWith('text/html')) {\n                    this.requestView.resDisplayMode = 'html';\n                    this.requestView.resContentType = 'text/html';\n                } else if (h.value.startsWith('text/css')) {\n                    this.requestView.resDisplayMode = 'css';\n                    this.requestView.resContentType = 'text/css';\n                }\n            });\n\n        const contentType: string = this.requestView.resContentType;\n        this.matchedResBodyViewers = this.resBodyVeiwers\n            .filter(viewer => !isUndefined(viewer.get(contentType)))\n            .map(viewer => <RequestExpander> viewer.get(contentType));\n\n\n        // if (this.matchedResBodyViewers == null) {\n        //   this.matchedResBodyViewers = new Array();\n        // }\n\n        this.matchedResBodyViewers.splice(0, 0, this.basicResBodyViewer);\n        this.selectedBodyViewer = this.matchedResBodyViewers[0];\n    }\n\n    /**\n     * http request가 실패했을 경우에 대한 처리\n     * cors 문제\n     * 응답을 받지 못함\n     */\n    handleError(err) {\n      console.log(err);\n        console.log('handleError!');\n        this.requestView.requestStatus = RequestStatus.SendFail;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/http-response/http-response.component.ts","/**\n * Angular 2\n */\nimport {\n  enableDebugTools,\n  disableDebugTools\n} from '@angular/platform-browser';\nimport {\n  ApplicationRef,\n  enableProdMode\n} from '@angular/core';\n/**\n * Environment Providers\n */\nlet PROVIDERS: any[] = [\n  /**\n   * Common env directives\n   */\n];\n\n/**\n * Angular debug tools in the dev console\n * https://github.com/angular/angular/blob/86405345b781a9dc2438c0fbe3e9409245647019/TOOLS_JS.md\n */\nlet _decorateModuleRef = <T>(value: T): T =>  value;\n\nif ('production' === ENV) {\n  enableProdMode();\n\n  /**\n   * Production\n   */\n  _decorateModuleRef = (modRef: any) => {\n    disableDebugTools();\n\n    return modRef;\n  };\n\n  PROVIDERS = [\n    ...PROVIDERS,\n    /**\n     * Custom providers in production.\n     */\n  ];\n\n} else {\n\n  _decorateModuleRef = (modRef: any) => {\n    const appRef = modRef.injector.get(ApplicationRef);\n    const cmpRef = appRef.components[0];\n\n    const _ng = (<any> window).ng;\n    enableDebugTools(cmpRef);\n    (<any> window).ng.probe = _ng.probe;\n    (<any> window).ng.coreTokens = _ng.coreTokens;\n    return modRef;\n  };\n\n  /**\n   * Development\n   */\n  PROVIDERS = [\n    ...PROVIDERS,\n    /**\n     * Custom providers in development.\n     */\n  ];\n\n}\n\nexport const decorateModuleRef = _decorateModuleRef;\n\nexport const ENV_PROVIDERS = [\n  ...PROVIDERS\n];\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/environment.ts","import { Component, ViewChild } from '@angular/core';\n\nimport { HttpClientsComponent } from 'app/components/http-clients/http-clients.component';\nimport { HttpClientTabComponent } from '../../../mint-client/src/http-client-tab/http-client-tab.component';\n\n@Component({\n  styles: [\n    '.app-action { z-index: 100000; display: inline-block; position: fixed; bottom: 20px; right: 20px; }'\n  ],\n  template: `\n  <span class=\"app-action\">\n  <button mat-fab\n    matTooltip=\"add Sandbox client\"\n    matTooltipPosition=\"above\"\n    (click)=\"addClient()\"><mat-icon>add</mat-icon></button>\n</span>\n\n<app-http-clients #httpClients></app-http-clients>`\n})\nexport class MultiClientTabComponent {\n\n  @ViewChild('httpClients')\n  httpClients: HttpClientTabComponent;\n\n  addClient() {\n    this.httpClients.addClient();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/multi-client/multi-client-tab.component.ts","import { Component, OnInit } from '@angular/core';\nimport { RequestView } from '../../../mint-client/src/requestViews';\n\n@Component({\n  selector: 'app-single-client',\n  template: `\n<div style=\"padding: 0.5em 1em 0.5em 1em\">\n    <app-http-client [requestView]=\"requestView\" [requestExpansions]=\"requestExpansions\"></app-http-client>\n</div>\n  `\n})\nexport class SingleClientComponent implements OnInit {\n\n  requestView: RequestView;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.requestView = new RequestView(null);\n    this.requestView.requestUrl = 'http://localhost:3000/assets/test.json';\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/single-client/single-client.component.ts","import { RequestExpander, RequestExpansion } from '../requestExpansions';\nimport { AuthorizationBasicComponent } from './authorization-basic/authorization-basic.component';\nimport { XWwwFormUrlencodedComponent } from './xwww-form-urlencoded/xwww-form-urlencoded.component';\nimport { TextPlainComponent } from './text-plain/text-plain.component';\nimport { TextHtmlViewerComponent } from './text-html-viewer/text-html-viewer.component';\n\n/**\n * 기본적으로 사용할 확장기능 정의 및 전달\n */\nexport class DefaultRequestExpansionBuilder {\n\n    static build(): Array<RequestExpansion> {\n        const requestExpansion = new RequestExpansion();\n        requestExpansion.headerBuilders.set('authorization', new RequestExpander('Basic Auth', AuthorizationBasicComponent));\n        requestExpansion.bodyBuilders.set('application/x-www-form-urlencoded', new RequestExpander('Default', XWwwFormUrlencodedComponent));\n        requestExpansion.bodyBuilders.set('text/plain', new RequestExpander('Default', TextPlainComponent));\n        requestExpansion.resBodyVeiwers.set('text/html', new RequestExpander('HTML View', TextHtmlViewerComponent));\n\n        const requestExpansions = new Array<RequestExpansion>();\n        requestExpansions.push(requestExpansion);\n\n        return requestExpansions;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/expansions/DefaultRequestExpansionBuilder.ts","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\n\n@Component({\n  selector: 'app-authorization-basic',\n  template: require('./authorization-basic.component.html'),\n  styles: [require('./authorization-basic.component.css')]\n})\nexport class AuthorizationBasicComponent implements OnInit {\n  basicAuthView: BasicAuthView;\n\n  constructor(\n    private dialogRef: MatDialogRef<AuthorizationBasicComponent>,\n    @Inject(MAT_DIALOG_DATA) private data: any) { }\n\n  ngOnInit() {\n    this.basicAuthView = this.data.viewModel;\n    if (this.basicAuthView == null) {\n      this.basicAuthView = new BasicAuthView();\n    }\n  }\n\n  apply() {\n    const authorization = 'Basic ' + btoa(this.basicAuthView.username + ':' + this.basicAuthView.password);\n    this.dialogRef.close({\n      value: authorization,\n      viewModel: this.basicAuthView\n    });\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n}\n\nexport class BasicAuthView {\n  username: string;\n  password: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/expansions/authorization-basic/authorization-basic.component.ts","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { NameValue } from '../../requestViews';\n\n@Component({\n  selector: 'app-text-plain',\n  template: require('./text-plain.component.html'),\n  styles: [require('./text-plain.component.css')]\n})\nexport class TextPlainComponent implements OnInit {\n\n  formDatas: Array<NameValue>;\n\n  constructor(\n    private dialogRef: MatDialogRef<TextPlainComponent>,\n    @Inject(MAT_DIALOG_DATA) private data: any) {\n      this.formDatas = this.data.viewModel;\n    }\n\n  ngOnInit() {\n        if (this.formDatas == null) {\n      this.formDatas = new Array();\n      this.formDatas.push(new NameValue());\n    }\n  }\n\n  apply() {\n    const textPlainFormData = this.formDatas\n      .filter(p => p.name != null || p.value != null)\n      .map(p => p.name + '=' + p.value)\n      .join('\\n');\n\n    this.dialogRef.close({\n      value: textPlainFormData,\n      viewModel: this.formDatas\n    });\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/expansions/text-plain/text-plain.component.ts","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { NameValue } from '../../requestViews';\n\n@Component({\n  selector: 'app-xwww-form-urlencoded',\n  template: require('./xwww-form-urlencoded.component.html'),\n  styles: [require('./xwww-form-urlencoded.component.css')]\n})\nexport class XWwwFormUrlencodedComponent implements OnInit {\n\n  formDatas: Array<NameValue>;\n\n  constructor(\n    private dialogRef: MatDialogRef<XWwwFormUrlencodedComponent>,\n    @Inject(MAT_DIALOG_DATA) private data: any) {\n      this.formDatas = this.data.viewModel;\n    }\n\n  ngOnInit() {\n        if (this.formDatas == null) {\n      this.formDatas = new Array<NameValue>();\n      this.formDatas.push(new NameValue());\n    }\n  }\n\n  apply() {\n    const urlEncodedFormData = this.formDatas\n      .filter(p => !p.isEmpty())\n      .map(p => encodeURI(p.name) + '=' + encodeURI(p.value))\n      .join('&');\n\n    this.dialogRef.close({\n      value: urlEncodedFormData,\n      viewModel: this.formDatas\n    });\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/expansions/xwww-form-urlencoded/xwww-form-urlencoded.component.ts","import {Component, OnInit, Input} from '@angular/core';\nimport {MatMenuTrigger, MatSnackBar} from '@angular/material';\nimport {RequestView} from '../requestViews';\nimport {RequestExpansion} from '../requestExpansions';\nimport {DefaultRequestExpansionBuilder} from '../expansions/DefaultRequestExpansionBuilder';\nimport {HttpClientConfig} from '../httpClientConfig';\nimport {HttpClientsPreference} from '../httpClientsPreference';\n\n@Component({\n  selector: 'app-http-clients',\n  template: require('./http-client-tab.component.html'),\n  // providers: [HttpClientExpansionService]\n})\nexport class HttpClientTabComponent implements OnInit {\n  @Input() preference?: HttpClientsPreference;\n\n  requestViews: Array<RequestView> = new Array();\n  requestExpansions?: Array<RequestExpansion>;\n\n  /**\n   * 탭 생성할때 부여할 번호. 이름을 구분하기 위해 사용\n   */\n  private tabCount = 1;\n\n  /**\n   * 현재 포커스를 가지고 있는 탭의 인덱스\n   */\n  private selectedIndex = 0;\n\n  constructor(// private httpClientExpansionService: HttpClientExpansionService,\n    private snackBar: MatSnackBar) {\n  }\n\n  /**\n   *\n   */\n  ngOnInit() {\n    if (this.preference == null) {\n      // TODO 기본 설정을 사용\n      this.preference = new HttpClientsPreference();\n      // this.preference.addAllDefaultStatus();\n    }\n\n    if (this.requestExpansions == null) {\n      // this.requestExpansions = new Array(); //TODO 입력받은 값이 없을 경우 기본 확장 셋이 등록되어야 한다.\n      this.requestExpansions = DefaultRequestExpansionBuilder.build();\n    }\n\n    this.addClient();\n\n    // const requestView: RequestView = new RequestView(\"SandBox-\" + this.tabCount++);\n    // this.requestViews.push(requestView);\n\n    // TODO 아래 내용들은 http-clients 밖에서 정의된후 넘어와야 한다.\n    // const requestExpansion = new RequestExpansion();\n    // requestExpansion.headerBuilders.add('authorization', {\n    //   name: 'Basic Auth',\n    //   component: AuthorizationBasicComponent\n    // });\n\n    // requestExpansion.queryParamBuilders.add('test', {\n    //   name: 'test',\n    //   component: AuthorizationBasicComponent\n    // });\n\n    // requestExpansion.urlParamBuilders.add('test', {\n    //   name: 'test',\n    //   component: AuthorizationBasicComponent\n    // });\n\n    // requestExpansion.bodyBuilders.add('application/x-www-form-urlencoded', {\n    //   name: 'Default',\n    //   component: XWwwFormUrlencodedComponent\n    // });\n    // requestExpansion.bodyBuilders.add('text/plain', {\n    //   name: 'Default',\n    //   component: TextPlainComponent\n    // });\n\n    // requestExpansion.resBodyVeiwers.add('text/html', {\n    //   name: 'HTML View',\n    //   component: TextHtmlViewerComponent\n    // });\n\n    // this.requestExpansions.push(requestExpansion);\n  }\n\n  /**\n   * 클라이언트 탭 추가\n   *\n   * @param focus 추가된 탭이 포커스를 가지게 할지 여부\n   * @param position 추가될 탭의 위치, 지정하지 않으면 마지막에 추가됨\n   * @param config\n   */\n  addClient(focus: boolean = true, position?: number, config?: HttpClientConfig) {\n    console.log('addClient');\n\n    if (!this.isAvailableAddTab()) {\n      return;\n    }\n\n    // TODO config 처리..\n\n    const requestView: RequestView = new RequestView('SandBox-' + this.tabCount++);\n    const addedIndex = this.requestViews.push(requestView);\n    if (focus) {\n      this.selectedIndex = addedIndex;\n    }\n  }\n\n  /**\n   * 클라이언트 탭 닫기\n   * @param index\n   */\n  closeClient(index: number) {\n    this.requestViews.splice(index, 1);\n  }\n\n  /**\n   * 탭 복제\n   * 입력 받은 인덱스의 탭과 같은 요청 정보가 셋팅된 클라이언트 탭을 추가\n   * @param index\n   */\n  duplicateClient(index: number) {\n    if (!this.isAvailableAddTab()) {\n      return;\n    }\n\n    const requestView: RequestView = this.requestViews[index];\n    const newRequestView = new RequestView('SandBox-' + this.tabCount++);\n    newRequestView.requestUrl = requestView.requestUrl;\n    // TODO 필요한 정보를 모두 복사\n\n    this.requestViews.splice(index + 1, 0, newRequestView);\n  }\n\n  /**\n   * 클라이언트 탭 을 추가로 생성할 수 있는지 알려준다.\n   */\n  private isAvailableAddTab(): boolean {\n    if (this.requestViews.length >= this.preference.maxClientTabCount) {\n      this.snackBar.open('You can not create tabs any more .', null, {\n        duration: 3000\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/http-client-tab/http-client-tab.component.ts","import { ComponentRef } from '@angular/core';\nimport { ComponentType } from '@angular/cdk/portal';\n\nimport { RequestView } from './requestViews';\n\n/**\n * http client 에 확장 포인트를 정의\n * 여기서 말하는 확장이라함은 http request의 구성 요소를 그냥 text로 작성하는 방식이 아닌\n * 좀더 쉬운 방법(UI 기반)을 제공해주는 역할과 response 데이터도 단순히 text가 아닌 정형화된 형태로\n * 보여줄수 있는 방법을 말한다.\n * 확장은 http request 의 구성요소중 지정된 요소에 대해서 가능하며 하나의 http request 에\n * 여러거의 확장 객체를 가질 수 있다.\n */\nexport class RequestExpansion {\n    /**\n     * header 값을 생성해주는 빌더\n     */\n    headerBuilders = new Map<string, RequestExpander>();\n\n    /**\n     * url parameter 값을 생성해주는 빌더\n     */\n    urlParamBuilders = new Map<string, RequestExpander>();\n\n    /**\n     * query string paramter 값을 생성해주는 빌더\n     */\n    queryParamBuilders = new Map<string, RequestExpander>();\n\n    /**\n     * request body 를 생성해주는 빌더\n     */\n    bodyBuilders = new Map<string, RequestExpander>();\n\n    /**\n     * response body 를 보여주는 뷰어\n     */\n    resBodyVeiwers = new Map<string, RequestExpander>();\n}\n\nexport class RequestExpander {\n    constructor(\n        public name: string,\n        public component: ComponentType<any>,\n        public componentRef?: ComponentRef<any>,\n        public viewModel?: any) { }\n}\n\nexport interface BodyViewerComponent {\n    requestView: RequestView;\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/requestExpansions.ts","import { Component, OnInit, Input } from '@angular/core';\nimport { BodyViewerComponent } from '../requestExpansions';\nimport { RequestView } from '../requestViews';\n\n@Component({\n    selector: 'app-response-body-basic',\n    template: require('./response-body-basic.component.html'),\n    styles: [require('./response-body-basic.component.css')]\n})\nexport class ResponseBodyBasicComponent implements BodyViewerComponent, OnInit {\n    @Input() requestView: RequestView;\n\n    // @ViewChild('editor') editor;\n\n    displayModes: string[];\n\n    displayResBody: string;\n\n    // aceOption: any;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        // console.log('ngOnInit');\n\n        // this.aceOption = {\n        //   minLines: 10,\n        //   maxLines: '1000',\n        //   showPrintMargin: false,\n        //   wrap: this.requestView.resBodyWrap\n        // }\n\n        this.displayModes = [\n            'text',\n            'json',\n            'xml',\n            'html',\n            'css',\n            'javascript'\n        ];\n\n        this.displayResBody = this.requestView.response.body;\n    }\n\n    onChangeFormat() {\n        console.log('onChangeFormat');\n        const resBodyFormat: boolean = this.requestView.resBodyFormat;\n        // console.log(resBodyFormat);\n        // console.log(this.requestView.resContentType);\n\n        if (!resBodyFormat) {\n            this.displayResBody = this.requestView.response.body;\n        } else {\n            if (this.requestView.resContentType === 'application/json') {\n                this.displayResBody = this.formatJson(this.requestView.response.body);\n            } else if (this.requestView.resContentType === 'application/xml' ||\n                this.requestView.resContentType === 'text/xml') {\n                this.displayResBody = this.formatXml(this.requestView.response.body);\n            } else {\n                // TODO notify unsupported format\n                console.warn('unsupported format. content type: ' + this.requestView.resContentType);\n            }\n        }\n    }\n\n    formatJson(json: string): string {\n        return JSON.stringify(JSON.parse(json), null, 2);\n    }\n\n    /**\n     *\n     * @param xml 원본 xml 문자\n     */\n    formatXml(xml: string): string {\n        let formatted = '';\n        const reg = /(>)(<)(\\/*)/g;\n        xml = xml.replace(reg, '$1\\r\\n$2$3');\n        let pad = 0;\n\n        xml.split('\\r\\n').forEach(node => {\n            let indent = 0;\n            if (node.match(/.+<\\/\\w[^>]*>$/)) {\n                indent = 0;\n            } else if (node.match(/^<\\/\\w/)) {\n                if (pad !== 0) {\n                    pad -= 1;\n                }\n            } else if (node.match(/^<\\w[^>]*[^\\/]>.*$/)) {\n                indent = 1;\n            } else {\n                indent = 0;\n            }\n\n            let padding = '';\n            for (let i = 0; i < pad; i++) {\n                padding += '  ';\n            }\n\n            formatted += padding + node + '\\r\\n';\n            pad += indent;\n        });\n\n        return formatted;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/response-body-basic/response-body-basic.component.ts","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class MyLibService {\n  public readonly myLib = 'Angular Library Starter';\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/my-lib/src/my-lib.service.ts","// import { RequestExpander } from 'app/requestExpansion';\n\nimport { RequestExpander } from './requestExpansions';\nimport { isNull, isUndefined } from 'util';\n\n/**\n * 하나의 request를 화면에 그리기 위한 모든 데이터 저장\n * http client component 에서 사용\n */\nexport class RequestView {\n    /**\n     * 해당 요청의 탭에 표시될 이름\n     */\n    title?: string;\n\n    /**\n     * 사용자가 입력한 요청 경로\n     * 이 경로가 바로 요청에 사용되지는 않고 parameter 값들을 binding 한 값을 최종 요청 경로로 사용하게 된다.\n     */\n    requestUrl: string; // http://localhost:4200/assets/test.json';\n\n    /**\n     * request body의 content type\n     * 요청 해더에 입력한 content type을 이 필드에 따로 저장합니다.\n     * 요청 바디의 syntax highlight 처리를 위해 이값을 따로 관리함\n     */\n    reqContentType: string = '';\n\n    /**\n     * 요청 바디를 화면에 표시할 방법\n     * ace editor 에 의존적인 값으로 요청 바디를 그리는 ace editor의 syntax highlight를 지정하는 값이다.\n     * 참조: https://ace.c9.io/build/kitchen-sink.html (모드 종류)\n     */\n    reqDisplayMode: string = 'text';\n\n    /**\n     *\n     */\n    isOpenParams: boolean;\n    paramTebSelectedIndex: number;\n\n    reqBodyWrap: boolean;\n    enableReqBodyBuilder: boolean;\n    // reqSyntaxHightlight: boolean = false;\n    // headerBuilders: Array<NameValue> = new Array();\n\n\n    requestStatus: RequestStatus = RequestStatus.PreSend;\n\n    // isOpenResponse: boolean;\n    resContentType: string = '';\n    resDisplayMode: string = 'text';\n    resBodyWrap: boolean = true;\n    resBodyFormat: boolean = false;\n\n    request: RequestInfo = new RequestInfo();\n    response: ResponseInfo = new ResponseInfo();\n\n    constructor(title?: string) {\n        this.title = title;\n    }\n}\n\nexport class RequestInfo {\n    url: string;\n    method: string = 'GET';\n    queryParams = [new NameValue()];\n    urlParams = [new NameValue()];\n\n    headers: Array<NameValue> = [new NameValue()];\n    body: string;\n}\n\nexport class ResponseInfo {\n    elapseTime: number;\n    status: number;\n    statusText: string | null;\n    headers: NameValue[] = [];\n\n    body: string;\n}\n\nexport class NameValue {\n    name: string;\n\n    value: string;\n\n    /**\n     * client에서 해당 이름이 고정인지 여부\n     * (고정이면 지울 수 없음)\n     */\n    FixedName: boolean;\n\n    /**\n     * client에서 해당 값이 고정인지 여부\n     * (고정이면 지울 수 없음)\n     */\n    FixedValue: boolean;\n\n    enableBuilder?: boolean;\n    selectedExpander?: RequestExpander;\n    showCloseButton?: boolean;\n    enabled: boolean = true;\n\n    constructor(name?: string, value?: string) {\n        this.name = isUndefined(name) ? '' : <string> name;\n        this.value = isUndefined(value) ? '' : <string> value;\n    }\n\n    static new(name: string | null, value: string | null): NameValue {\n        const nameValue = new NameValue();\n        nameValue.name = isNull(name) ? '' : <string> name;\n        nameValue.value = isNull(value) ? '' : <string> value;\n        return nameValue;\n    }\n\n    isEmpty(): boolean {\n        return this.name === '' && this.value === '';\n    }\n}\n\nexport enum RequestStatus {\n    /**\n     * 초기 상태. 요청을 하지 않은 상태\n     */\n    PreSend,\n\n    /**\n     * 요청중. 아직 응답은 받지 못한 상태\n     */\n    Sending,\n\n    /**\n     * 요청 성공. 서버에서 응답을 받은 상태\n     */\n    SendSuccess,\n\n    /**\n     * 요청 실패. 서버에서 응답을 받지 못함\n     * (서버 무응답(time out..), 인터넷 불가등..)\n     */\n    SendFail\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/requestViews.ts","function webpackEmptyAsyncContext(req) {\n\treturn new Promise(function(resolve, reject) { reject(new Error(\"Cannot find module '\" + req + \"'.\")); });\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 256;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 256\n// module chunks = 1","/**\n * App\n */\nexport * from './app.module';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/index.ts","/**\n * Angular 2 decorators and services\n */\nimport {\n  Component,\n  OnInit,\n  ViewEncapsulation\n} from '@angular/core';\nimport { AppState } from './app.service';\n\n/**\n * App Component\n * Top Level Component\n */\n@Component({\n  selector: 'app-root',\n  encapsulation: ViewEncapsulation.None,\n  styles: [\n    require('./app.component.css')\n  ],\n  template: `\n<app-header></app-header>\n\n<div class=\"content-container content\">\n    <router-outlet></router-outlet>\n</div>`\n})\nexport class AppComponent implements OnInit {\n  public angularclassLogo = 'assets/img/angularclass-avatar.png';\n  public name = 'Angular 2 Webpack Starter';\n  public url = 'https://twitter.com/AngularClass';\n\n  constructor(\n    public appState: AppState\n  ) {}\n\n  public ngOnInit() {\n    console.log('Initial App State', this.appState.state);\n  }\n\n}\n\n/**\n * Please review the https://github.com/AngularClass/angular2-examples/ repo for\n * more angular app examples that you may copy/paste\n * (The examples may not be updated as quickly. Please open an issue on github for us to update it)\n * For help or questions please contact us at @AngularClass on twitter\n * or our chat on Slack at https://AngularClass.com/slack-join\n */\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule } from '@angular/forms';\nimport {\n  NgModule,\n  ApplicationRef\n} from '@angular/core';\nimport {\n  removeNgStyles,\n  createNewHosts,\n  createInputTransfer\n} from '@angularclass/hmr';\nimport {\n  RouterModule,\n  PreloadAllModules\n} from '@angular/router';\n\n/*\n * Platform and Environment providers/directives/pipes\n */\nimport { ENV_PROVIDERS } from './environment';\nimport { ROUTES } from './app.routes';\n// App is our top level component\nimport { AppComponent } from './app.component';\nimport { APP_RESOLVER_PROVIDERS } from './app.resolver';\nimport { AppState, InternalStateType } from './app.service';\nimport { HomeComponent } from './home';\nimport { NoContentComponent } from './no-content';\n\nimport '../styles/styles.scss';\nimport '../styles/headings.css';\n\n// Application wide providers\nconst APP_PROVIDERS = [\n  ...APP_RESOLVER_PROVIDERS,\n  AppState\n];\n\nexport interface StoreType {\n  state: InternalStateType;\n  restoreInputValues: () => void;\n  disposeOldHosts: () => void;\n}\n\nimport { MyLibModule } from 'my-lib';\nimport { MintClientModule } from 'mint-client';\n// import { MintClientModule } from '../../mintClient/src/mint-client.module';\nimport { DetailComponent } from './detail/detail.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SingleClientComponent } from './single-client/single-client.component';\nimport { MultiClientTabComponent } from './multi-client/multi-client-tab.component';\nimport { HeaderComponent } from './components/header.component';\nimport { MatButtonModule, MatIconModule, MatMenuModule, MatTabsModule, MatToolbarModule } from '@angular/material';\nimport {FlexLayoutModule} from '@angular/flex-layout';\n\n/**\n * `AppModule` is the main entry point into Angular2's bootstraping process\n */\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    DetailComponent,\n    NoContentComponent,\n    HeaderComponent,\n    SingleClientComponent,\n    MultiClientTabComponent\n  ],\n  /**\n   * Import Angular's modules.\n   */\n  imports: [\n    BrowserAnimationsModule,\n    BrowserModule,\n    FormsModule,\n    FlexLayoutModule,\n    HttpClientModule,\n    MyLibModule,\n    MatButtonModule,\n    MatIconModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatTabsModule,\n    MintClientModule,\n    RouterModule.forRoot(\n      ROUTES,\n      {useHash: true, preloadingStrategy: PreloadAllModules})\n  ],\n  /**\n   * Expose our Services and Providers into Angular's dependency injection.\n   */\n  providers: [\n    ENV_PROVIDERS,\n    APP_PROVIDERS\n  ]\n})\nexport class AppModule {\n\n  constructor(public appRef: ApplicationRef,\n              public appState: AppState) {\n  }\n\n  public hmrOnInit(store: StoreType) {\n    if (!store || !store.state) {\n      return;\n    }\n    console.log('HMR store', JSON.stringify(store, null, 2));\n    /**\n     * Set state\n     */\n    this.appState._state = store.state;\n    /**\n     * Set input values\n     */\n    if ('restoreInputValues' in store) {\n      const restoreInputValues = store.restoreInputValues;\n      setTimeout(restoreInputValues);\n    }\n\n    this.appRef.tick();\n    delete store.state;\n    delete store.restoreInputValues;\n  }\n\n  public hmrOnDestroy(store: StoreType) {\n    const cmpLocation = this.appRef.components.map((cmp) => cmp.location.nativeElement);\n    /**\n     * Save state\n     */\n    const state = this.appState._state;\n    store.state = state;\n    /**\n     * Recreate root elements\n     */\n    store.disposeOldHosts = createNewHosts(cmpLocation);\n    /**\n     * Save input values\n     */\n    store.restoreInputValues = createInputTransfer();\n    /**\n     * Remove styles\n     */\n    removeNgStyles();\n  }\n\n  public hmrAfterDestroy(store: StoreType) {\n    /**\n     * Display new elements\n     */\n    store.disposeOldHosts();\n    delete store.disposeOldHosts;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/app.module.ts","import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\n\n@Injectable()\nexport class DataResolver implements Resolve<any> {\n  public resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    return Observable.of({ res: 'I am data'});\n  }\n}\n\n/**\n * An array of services to resolve routes with data.\n */\nexport const APP_RESOLVER_PROVIDERS = [\n  DataResolver\n];\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/app.resolver.ts","import { Routes } from '@angular/router';\nimport { HomeComponent } from './home';\nimport { NoContentComponent } from './no-content';\nimport { DetailComponent } from './detail/detail.component';\nimport { SingleClientComponent } from './single-client/single-client.component';\nimport {MultiClientTabComponent} from './multi-client/multi-client-tab.component';\n\nexport const ROUTES: Routes = [\n  // { path: '',      component: HomeComponent },\n  { path: '', redirectTo: '/client', pathMatch: 'full' },\n  // { path: 'home',  component: HomeComponent },\n  // { path: 'detail',  component: DetailComponent },\n  { path: 'clients', component: MultiClientTabComponent },\n  { path: 'client', component: SingleClientComponent },\n  // { path: '**',    component: NoContentComponent },\n];\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/app.routes.ts","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  template: `\n<mat-toolbar color=\"primary\">\n    <span>Mint Sample App</span>\n    <button mat-button routerLink=\"/client\">single client</button>\n    <button mat-button routerLink=\"/clients\">multi client</button>\n    <span fxFlex></span>\n    <button mat-icon-button mdTooltip=\"Help\">\n        <mat-icon>help</mat-icon>\n    </button>\n</mat-toolbar>\n  `\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/components/header.component.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-detail',\n  template: `\n   <app-http-client></app-http-client> \n  `})\nexport class DetailComponent {\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/detail/detail.component.ts","import {\n  Component,\n  OnInit\n} from '@angular/core';\n\nimport { AppState } from '../app.service';\n\n\n@Component({\n\n  selector: 'app-home',  // <home></home>\n  /**\n   * Our list of styles in our component. We may add more to compose many styles together.\n   */\n  styles: [ require('./home.component.css') ],\n  /**\n   * Every Angular template is first compiled by the browser before Angular runs it's compiler.\n   */\n  template: require('./home.component.html')\n})\nexport class HomeComponent implements OnInit {\n  value: number;\n\n  /**\n   * Set our default values\n   */\n  public localState = { value: '' };\n  /**\n   * TypeScript public modifiers\n   */\n  constructor(\n    public appState: AppState,\n  ) {}\n\n  public ngOnInit() {\n    console.log('hello `Home` component');\n    /**\n     * this.title.getData().subscribe(data => this.data = data);\n     */\n  }\n\n  public submitState(value: string) {\n    console.log('submitState', value);\n    this.appState.set('value', value);\n    this.localState.value = '';\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/home/home.component.ts","export * from './home.component';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/home/index.ts","export * from './no-content.component';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/no-content/index.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-no-content',\n  template: `\n    <div>\n      <h1>404: page missing</h1>\n    </div>\n  `\n})\nexport class NoContentComponent {\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/app/no-content/no-content.component.ts","/**\n * Angular bootstrapping\n */\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { decorateModuleRef } from './app/environment';\n\n/**\n * App Module\n * our top level module that holds all of our components\n */\nimport { AppModule } from './app';\n\n/**\n * Bootstrap our Angular app with a top level NgModule\n */\nexport function main(): Promise<any> {\n  return platformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .then(decorateModuleRef)\n    .catch((err) => console.error(err));\n}\n\n/**\n * Needed for hmr\n * in prod this is replace for document ready\n */\nswitch (document.readyState) {\n  case 'loading':\n    document.addEventListener('DOMContentLoaded', _domReadyHandler, false);\n    break;\n  case 'interactive':\n  case 'complete':\n  default:\n    main();\n}\n\nfunction _domReadyHandler() {\n document.removeEventListener('DOMContentLoaded', _domReadyHandler, false);\n main();\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/demo/main.browser.ts","import { Injectable } from '@angular/core';\n// import { Response, ResponseType } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/add/operator/map';\n\nimport { NameValue, ResponseInfo } from './requestViews';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\n\n\n@Injectable()\nexport class HttpClientService {\n\n    constructor(private http: HttpClient) {\n    }\n\n    execute2(method: string, url: string, requestHeaders: Array<NameValue>, body: any): Observable<ResponseInfo> {\n        const headers = new HttpHeaders();\n        requestHeaders\n            .filter(nameValue => !nameValue.isEmpty())\n            .forEach(nameValue => {\n                headers.set(<string> nameValue.name, <string> nameValue.value);\n            });\n\n        const startTime = new Date().getTime();\n        return this.http.request(method, url, {\n            body: body,\n            headers: headers,\n            observe: 'response',\n            responseType: 'text'\n        }).map((response: HttpResponse<Object>) => {\n            console.log(response);\n            const elapseTime = new Date().getTime() - startTime;\n            const responseInfo: ResponseInfo = new ResponseInfo();\n            responseInfo.status = response.status;\n            responseInfo.statusText = response.statusText;\n            responseInfo.elapseTime = elapseTime;\n\n            response.headers.keys()\n                .forEach(k => {\n                    responseInfo.headers.push(NameValue.new(k, response.headers.get(k)));\n                });\n\n            responseInfo.body = response.body == null ? '' : <string> response.body;\n\n            return responseInfo;\n        }); // .catch(this.handleError);\n    }\n\n    // handleError(response: Response): Observable<ResponseInfo> {\n    //     console.log(response);\n    //     if (response.type === ResponseType.Error) {\n    //         return Observable.throw('error!');\n    //     }\n    //\n    //     const responseInfo: ResponseInfo = new ResponseInfo();\n    //     responseInfo.status = response.status;\n    //     responseInfo.statusText = response.statusText;\n    //\n    //     if (response.headers != null) {\n    //         response.headers.keys().forEach(k => {\n    //             responseInfo.headers.push(NameValue.new(k, response.headers.get(k)));\n    //         });\n    //     }\n    //\n    //     responseInfo.body = response.text() === '' ? null : response.text();\n    //     return Observable.of(responseInfo);\n    // }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/http-client.service.ts","import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { HttpClientConfig } from '../httpClientConfig';\nimport { RequestView } from '../requestViews';\nimport { RequestExpansion } from '../requestExpansions';\nimport { HttpResponseComponent } from '../http-response/http-response.component';\nimport { DefaultRequestExpansionBuilder } from '../expansions/DefaultRequestExpansionBuilder';\n\n@Component({\n  selector: 'app-http-client',\n  template: require('./http-client.component.html')\n})\nexport class HttpClientComponent implements OnInit {\n  @Input() config?: HttpClientConfig;\n\n  @Input() requestView?: RequestView;\n  @Input() requestExpansions?: Array<RequestExpansion>;\n  @ViewChild(HttpResponseComponent) httpResponse: HttpResponseComponent;\n\n  constructor() { }\n\n  ngOnInit() {\n    // console.log(this.httpResponse);\n\n    if (this.config == null) {\n      this.config = new HttpClientConfig();\n    }\n\n    if (this.requestView == null) {\n      this.requestView = new RequestView();\n    }\n\n    if (this.requestExpansions == null) {\n      // this.requestExpansions = new Array(); //TODO 입력받은 값이 없을 경우 기본 확장 셋이 등록되어야 한다.\n      this.requestExpansions = DefaultRequestExpansionBuilder.build();\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/http-client/http-client.component.ts","import { Component, OnInit, Input } from '@angular/core';\nimport { MatDialog } from '@angular/material';\n\nimport { NameValue, RequestStatus, RequestView, ResponseInfo } from '../requestViews';\nimport { RequestExpander, RequestExpansion } from '../requestExpansions';\nimport { HttpResponseComponent } from '../http-response/http-response.component';\nimport { HttpClientService } from '../http-client.service';\n\n\n@Component({\n  selector: 'app-http-request',\n  template: require('./http-request.component.html'),\n  providers: [HttpClientService]\n})\nexport class HttpRequestComponent implements OnInit {\n  RequestStatus: any = RequestStatus;\n\n  @Input() requestView: RequestView;\n  @Input() requestExpansions: Array<RequestExpansion>;\n  @Input() httpResponse: HttpResponseComponent;\n\n  headerBuilders: Array<Map<string, RequestExpander>>;\n  urlParamBuilders: Array<Map<string, RequestExpander>>;\n  queryParamBuilders: Array<Map<string, RequestExpander>>;\n  reqBodyBuilders: Array<Map<string, RequestExpander>>;\n\n  httpMethods: string[];\n\n  constructor(private httpClient: HttpClientService, private dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n\n    this.httpMethods = [\n      'GET',\n      'POST',\n      'PUT',\n      'PATCH',\n      'DELETE',\n      'HEAD',\n      'OPTIONS'\n    ];\n\n    this.headerBuilders = this.requestExpansions.map(re => re.headerBuilders);\n    this.urlParamBuilders = this.requestExpansions.map(re => re.urlParamBuilders);\n    this.queryParamBuilders = this.requestExpansions.map(re => re.queryParamBuilders);\n    this.reqBodyBuilders = this.requestExpansions.map(re => re.bodyBuilders);\n  }\n\n  send() {\n    console.log('send!');\n\n    const cleanedUrl = this.cleanRequestUrl(this.requestView.requestUrl);\n    console.log('@@@: ' + this.requestView.requestUrl);\n    this.requestView.requestUrl = cleanedUrl;\n\n    const fianlRequestUrl: string = this.makeFinalRequestUrl(cleanedUrl);\n    const body = this.requestView.request.body;\n    const method = this.requestView.request.method;\n    const requestHeaders = this.requestView.request.headers.filter(h => h.enabled);\n\n    this.requestView.request.url = fianlRequestUrl;\n    this.requestView.requestStatus = RequestStatus.Sending;\n    this.requestView.response = new ResponseInfo();\n    this.requestView.resBodyFormat = false;\n    this.requestView.resBodyWrap = true;\n\n    this.httpClient.execute2(method, fianlRequestUrl, requestHeaders, body)\n      .subscribe(\n        response => this.httpResponse.handleResponse(response),\n        error => this.httpResponse.handleError(error)\n      );\n    // .subscribe(response => this.httpResponse.handleResponse(response));\n  }\n\n  private cleanRequestUrl(dirtyUrl?: string): string {\n    if (dirtyUrl == null) {\n      return '';\n    }\n\n    return dirtyUrl.replace('\\n', '');\n  }\n\n  private makeFinalRequestUrl(rawUrl: string): string {\n    let fianlRequestUrl: string;\n    const url = rawUrl;\n\n    if (url.indexOf('}') < 0) {\n      fianlRequestUrl = url;\n    } else {\n      let uri: string = url;\n      let queryString: string = '';\n\n      const qIndex = url.indexOf('?');\n\n      console.log(qIndex);\n\n      if (qIndex > -1) {\n        uri = url.substring(0, qIndex);\n        queryString = url.substring(qIndex + 1, url.length);\n      }\n\n      // if (uri != null) {\n      this.requestView.request.urlParams\n        .filter(nameValue => nameValue.enabled)\n        .forEach(nameValue => {\n          const value = nameValue.value === undefined ? '' : nameValue.value;\n          uri = uri.replace('{' + nameValue.name + '}', value);\n        });\n      // }\n\n      // if (queryString != null) {\n      this.requestView.request.queryParams\n        .filter(nameValue => nameValue.enabled)\n        .forEach(nameValue => {\n          queryString = queryString.replace('{' + nameValue.name + '}', nameValue.value);\n        });\n      // }\n\n      fianlRequestUrl = uri;\n      if (queryString !== '') {\n        fianlRequestUrl = fianlRequestUrl + '?' + queryString;\n      }\n    }\n\n    return fianlRequestUrl;\n  }\n\n  findParams($event: KeyboardEvent) {\n    if ($event.key === 'Enter') {\n      // TODO 더 좋은 방식으로 바꿔야 함\n      this.requestView.requestUrl = this.requestView.requestUrl.substr(0, this.requestView.requestUrl.length - 1);\n      this.send();\n      return;\n    }\n\n    const url: string = this.requestView.requestUrl;\n    if (url == null || '' === url) {\n      return;\n    }\n\n    if ($event.key !== '}') {\n      if (url.indexOf('}') < -1) {\n        return;\n      }\n    }\n\n    let uri: string = url;\n    let queryString: string = '';\n\n    const qIndex = url.indexOf('?');\n\n    if (qIndex > 0) {\n      uri = url.substring(0, qIndex);\n      queryString = url.substring(qIndex + 1, url.length);\n    }\n\n    if (uri.length > 0) {\n      if (this.findProperties(uri, this.requestView.request.urlParams)) {\n        this.requestView.isOpenParams = true;\n        this.requestView.paramTebSelectedIndex = 1;\n      }\n    }\n\n    if (queryString !== '') {\n      if (this.findProperties(queryString, this.requestView.request.queryParams)) {\n        this.requestView.isOpenParams = true;\n        this.requestView.paramTebSelectedIndex = 0;\n      }\n    }\n  }\n\n  findProperties(source: string, target: NameValue[]): boolean {\n    const paramNames = new Array<string>();\n    let isStartParamName = false;\n    let tempName = '';\n    source.split('').forEach(s => {\n      if (s === '{') {\n        isStartParamName = true;\n      } else if (s === '}') {\n        isStartParamName = false;\n        if (tempName !== '') {\n          paramNames.push(tempName);\n          tempName = '';\n        }\n      } else if (isStartParamName) {\n        tempName += s;\n      }\n    });\n\n    paramNames.forEach(name => {\n      const exist = target.find(p => p.name === name);\n      if (!exist) {\n        const param = target.pop();\n        if (param !== undefined) {\n          param.name = name;\n          target.push(param);\n          target.push(new NameValue());\n        }\n      }\n    });\n\n    if (paramNames.length > 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/http-request/http-request.component.ts","import { NameValue } from './requestViews';\nimport { RequestExpansion } from './requestExpansions';\n\n/**\n * http client 의 설정 정보\n */\nexport class HttpClientConfig {\n    /**\n     * clinet 의 이름. tab 에서 tab의 이름이 된다.\n     */\n    private name: string;\n\n    /**\n     * 기본적으로 추가되어 있는 확장. RequestExpansion 설명 참조\n     */\n    private requestExpansions: Array<RequestExpansion>;\n\n    /**\n     * 기본 지정된 요청 정보. DefinedRequestInfo 설명 참조\n     */\n    private definedRequestInfo: DefinedRequestInfo;\n}\n\n/**\n * 미리 정의된 request 정보, http client 를 생성하자마자 입력된 값을 보여주려고 할때 사용\n * 여기에 지정된 내용들은 기본적으로 client 에서 지우거나 수정할 수 없다.\n */\nexport class DefinedRequestInfo {\n    url: string;\n    method: string = 'GET';\n    queryParams: Array<NameValue> = [new NameValue()];\n    urlParams: Array<NameValue> = [new NameValue()];\n\n    headers: Array<NameValue> = [new NameValue()];\n    body: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/httpClientConfig.ts","/**\n * http client tab 전체를 관리하는 환경 설정 값 객체\n */\n\nimport {RequestExpansion} from \"./requestExpansions\";\nimport {NameValue} from \"./requestViews\";\n\nexport class HttpClientsPreference {\n  /**\n   * 허용하는 탭의 최대 갯수\n   */\n  maxClientTabCount: number = 10;\n\n  // definedMethods: Array<string> = new Array();\n\n  // definedHeaders: Array<Header> = new Array();\n\n  // addAllDefaultStatus() {\n  //     this.definedMethods.push('GET');\n  //     this.definedMethods.push('POST');\n  //     this.definedMethods.push('PUT');\n  //     this.definedMethods.push('PATCH');\n  //     this.definedMethods.push('DELETE');\n  //     this.definedMethods.push('OPTIONS');\n\n  //     this.definedHeaders.push(new Header('Accept', null));\n  // }\n}\n\n/**\n * http client 의 설정 정보\n */\nexport class HttpClientConfig {\n  /**\n   * clinet 의 이름. tab 에서 tab의 이름이 된다.\n   */\n  private name: string;\n\n  /**\n   * 기본적으로 추가되어 있는 확장. RequestExpansion 설명 참조\n   */\n  private requestExpansions: Array<RequestExpansion>;\n\n  /**\n   * 기본 지정된 요청 정보. DefinedRequestInfo 설명 참조\n   */\n  private definedRequestInfo: DefinedRequestInfo;\n}\n\n// export class Header {\n//     name: string;\n//     values: Array<string>;\n\n//     constructor(name: string, values: Array<string>) {\n//         this.name = name;\n//         this.values = values;\n//     }\n// }\n\n// export class Status {\n//     code: number;\n//     text: string;\n//     description: string;\n// }\n\n/**\n * 미리 정의된 request 정보, http client 를 생성하자마자 입력된 값을 보여주려고 할때 사용\n * 여기에 지정된 내용들은 기본적으로 client 에서 지우거나 수정할 수 없다.\n */\nexport class DefinedRequestInfo {\n  url: string;\n  method: string = 'GET';\n  queryParams: Array<NameValue> = [new NameValue()];\n  urlParams: Array<NameValue> = [new NameValue()];\n\n  headers: Array<NameValue> = [new NameValue()];\n  body: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/httpClientsPreference.ts","export { MintClientModule } from './mint-client.module';\nexport { RequestView } from './requestViews';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mint-client/src/index.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport {\n  MatButtonModule,\n  // MatButtonToggleModule,\n  MatCheckboxModule,\n  MatDialogModule,\n  MatIconModule,\n  MatInputModule,\n  MatMenuModule, MatProgressBarModule,\n  MatRadioModule,\n  MatSelectModule,\n  MatSnackBarModule,\n  MatTabsModule,\n  MatTooltipModule\n} from '@angular/material';\n\n// import { AceEditorDirective } from 'ng2-ace';\n\nimport { AceEditorModule } from 'ng2-ace-editor';\n\nimport 'brace/theme/idle_fingers';\nimport 'brace/theme/dawn';\nimport 'brace/mode/css';\nimport 'brace/mode/html';\nimport 'brace/mode/javascript';\nimport 'brace/mode/json';\nimport 'brace/mode/text';\nimport 'brace/mode/properties';\nimport 'brace/mode/xml';\n\nimport { AuthorizationBasicComponent } from './expansions/authorization-basic/authorization-basic.component';\nimport { SafeHtmlPipe } from './expansions/text-html-viewer/text-html-viewer.component';\nimport { TextHtmlViewerComponent } from './expansions/text-html-viewer/text-html-viewer.component';\nimport { TextPlainComponent } from './expansions/text-plain/text-plain.component';\nimport { XWwwFormUrlencodedComponent } from './expansions/xwww-form-urlencoded/xwww-form-urlencoded.component';\nimport { HttpClientComponent } from './http-client/http-client.component';\nimport { HttpClientTabComponent } from './http-client-tab/http-client-tab.component';\nimport { BuilderDialogComponent } from './builder-dialog/builder-dialog.component';\nimport { ResponseBodyBasicComponent } from './response-body-basic/response-body-basic.component';\nimport { HttpRequestComponent } from './http-request/http-request.component';\nimport { BodyViewerHostDirective, HttpResponseComponent } from './http-response/http-response.component';\nimport { NameValuesComponent } from './name-values/name-values.component';\nimport { RequestBodyComponent } from './request-body/request-body.component';\n\n@NgModule({\n  declarations: [\n    // AceEditorDirective,\n    BuilderDialogComponent,\n    HttpRequestComponent,\n    HttpResponseComponent,\n    AuthorizationBasicComponent,\n    NameValuesComponent,\n    XWwwFormUrlencodedComponent,\n    RequestBodyComponent,\n    TextPlainComponent,\n    HttpClientComponent,\n    HttpClientTabComponent,\n    ResponseBodyBasicComponent,\n    BodyViewerHostDirective,\n    TextHtmlViewerComponent,\n    SafeHtmlPipe\n  ],\n  entryComponents: [\n    AuthorizationBasicComponent,\n    BuilderDialogComponent,\n    TextPlainComponent,\n    XWwwFormUrlencodedComponent,\n    ResponseBodyBasicComponent,\n    TextHtmlViewerComponent\n  ],\n  exports: [\n    HttpClientComponent,\n    HttpClientTabComponent\n  ],\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    FormsModule,\n    HttpModule,\n    AceEditorModule,\n    MatButtonModule,\n    // MatButtonToggleModule,\n    MatCheckboxModule,\n    MatDialogModule,\n    MatIconModule,\n    MatInputModule,\n    MatMenuModule,\n    MatProgressBarModule,\n    MatRadioModule,\n    MatSelectModule,\n    // MatSidenavModule,\n    MatSnackBarModule,\n    MatTabsModule,\n    MatTooltipModule\n  ]\n})\nexport class MintClientModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mint-client/src/mint-client.module.ts","import { Component, OnInit, Input } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { NameValue } from '../requestViews';\nimport { RequestExpander } from '../requestExpansions';\nimport { BuilderDialogComponent } from '../builder-dialog/builder-dialog.component';\nimport { isUndefined } from 'util';\n\n@Component({\n  selector: 'app-name-values',\n  template: require('./name-values.component.html'),\n})\nexport class NameValuesComponent implements OnInit {\n  @Input() nameValueBuilders: Map<string, RequestExpander>[];\n\n  @Input() nameValues: Array<NameValue>;\n\n  constructor(private dialog: MatDialog) { }\n\n  ngOnInit() {\n    if (this.nameValueBuilders == null) {\n      this.nameValueBuilders = new Array<Map<string, RequestExpander>>();\n    }\n\n    if (this.nameValues == null) {\n      this.nameValues = new Array<NameValue>();\n    }\n  }\n\n  findBuilder(selectedIndex: number) {\n    const header: NameValue = this.nameValues[selectedIndex];\n    if (header.name == null) {\n      // TODO 에러 처리\n      return;\n    }\n\n    const headerName: string = header.name.toLowerCase();\n\n    const headerBuilder = this.nameValueBuilders.find(b => !isUndefined(b.get(headerName)));\n    if (headerBuilder != null) {\n      this.nameValues[selectedIndex].enableBuilder = true;\n    } else {\n      this.nameValues[selectedIndex].enableBuilder = false;\n    }\n  }\n\n  openBuilder(selectedIndex: number) {\n    const header: NameValue = this.nameValues[selectedIndex];\n      if (header.name == null) {\n      // TODO 에러 처리\n        return;\n    }\n\n    const headerName: string = header.name.toLowerCase();\n\n    const matchedHeaderBuilders: RequestExpander[] =\n      this.nameValueBuilders\n        .filter(builder => !isUndefined(builder.get(headerName)))\n        .map(builder => <RequestExpander> builder.get(headerName));\n\n    this.dialog.open(BuilderDialogComponent, {\n      data: {\n        title: header.name + ' Builder Select',\n        expanders: matchedHeaderBuilders,\n        selectedExpander: this.nameValues[selectedIndex].selectedExpander\n      }\n    })\n    .afterClosed()\n    .subscribe(data => {\n      if (data != null) {\n        if (data.value != null) {\n          header.value = data.value;\n          this.nameValues[selectedIndex].selectedExpander = data.selectedExpander;\n          this.addNameValue(selectedIndex);\n        }\n      }\n    });\n  }\n\n  addNameValue(selectedIndex: number) {\n    if (selectedIndex === this.nameValues.length - 1) {\n      this.nameValues.push(new NameValue());\n    }\n  }\n\n  optimize() {\n    const length = this.nameValues.length;\n    if (length <= 1) {\n      return;\n    }\n\n    const lastNameValue: NameValue = this.nameValues[length - 1];\n    const prevLastNameValue: NameValue = this.nameValues[length - 2];\n    if (this.isEmpty(lastNameValue) && this.isEmpty(prevLastNameValue)) {\n      this.nameValues.pop();\n    }\n  }\n\n  isEmpty(nameValue: NameValue): boolean {\n    if (nameValue.value == null || nameValue.value === '') {\n      if (nameValue.name == null || nameValue.name === '') {\n        return true;\n      }\n    }\n      return false;\n  }\n\n  /**\n   * 선택된 항목을 배열에서 삭제\n   * @param selectedIndex\n   */\n  remove(selectedIndex: number) {\n    this.nameValues.splice(selectedIndex, 1);\n  }\n\n  disabled(selectedIndex: number) {\n    const selectedNameValue: NameValue = this.nameValues[selectedIndex];\n    selectedNameValue.enabled = false;\n  }\n\n    enabled(selectedIndex: number) {\n    const selectedNameValue: NameValue = this.nameValues[selectedIndex];\n    selectedNameValue.enabled = true;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/name-values/name-values.component.ts","import { Component, OnInit, Input } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { NameValue, RequestView } from '../requestViews';\nimport { RequestExpander } from '../requestExpansions';\nimport { BuilderDialogComponent } from '../builder-dialog/builder-dialog.component';\n\n\n@Component({\n    selector: 'app-request-body',\n    template: require('./request-body.component.html'),\n    styles: [require('./request-body.component.css')]\n})\nexport class RequestBodyComponent implements OnInit {\n    @Input() requestView: RequestView;\n\n    @Input() reqBodyBuilders: Array<Map<string, RequestExpander>>;\n\n    contentTypes: string[];\n    displayModes: string[];\n\n    selectedReqBodyExpander: number;\n\n    suggestedDisplayModes = new Map<string, string>();\n\n    constructor(private dialog: MatDialog) {\n    }\n\n    ngOnInit() {\n        this.contentTypes = [\n            'application/json',\n            'application/xml',\n            'application/x-www-form-urlencoded',\n            'multipart/form-data',\n            'text/html',\n            'text/plain'\n        ];\n        this.displayModes = [\n            'css',\n            'html',\n            'javascript',\n            'json',\n            'text',\n            'properties',\n            'xml'\n        ];\n\n        this.suggestedDisplayModes.set('application/json', 'json');\n        this.suggestedDisplayModes.set('application/xml', 'xml');\n        this.suggestedDisplayModes.set('application/x-www-form-urlencoded', 'text');\n        this.suggestedDisplayModes.set('multipart/form-data', 'text');\n        this.suggestedDisplayModes.set('text/html', 'html');\n        this.suggestedDisplayModes.set('text/plain', 'properties');\n    }\n\n\n    onChange(data: any) {\n        console.log('onChange');\n        this.requestView.request.body = data;\n    }\n\n    onChangeRequestBodyContentType() {\n        const reqContentType: string = this.requestView.reqContentType;\n\n        const displayMode = this.suggestedDisplayModes.get(reqContentType);\n        if (displayMode != null) {\n            this.requestView.reqDisplayMode = displayMode;\n        } else {\n            this.requestView.reqDisplayMode = 'text';\n        }\n\n        const reqBodyBuilder = this.reqBodyBuilders.find(builder => builder.has(reqContentType));\n        if (reqBodyBuilder !== undefined) {\n            this.requestView.enableReqBodyBuilder = true;\n        } else {\n            this.requestView.enableReqBodyBuilder = false;\n        }\n\n        const contentTypeHeader = this.requestView.request.headers\n        // .filter((h: NameValue) => h.name != null)\n            .find((h: NameValue) => h.name.toLowerCase() === 'content-type');\n\n        if (contentTypeHeader != null) {\n            contentTypeHeader.value = reqContentType;\n        } else {\n            this.requestView.request.headers.pop();\n            this.requestView.request.headers.push(new NameValue('Content-Type', reqContentType));\n            this.requestView.request.headers.push(new NameValue());\n        }\n    }\n\n    openReqBodyBuilder() {\n        const reqContentType: string = this.requestView.reqContentType;\n\n        const matchedBuilders: RequestExpander[] =\n            this.reqBodyBuilders\n                .filter(builder => builder.has(reqContentType))\n                .map(builder => <RequestExpander> builder.get(reqContentType));\n\n        this.dialog.open(BuilderDialogComponent, {\n            data: {\n                title: 'Request Body Builder Select',\n                expanders: matchedBuilders,\n                selectedExpander: this.selectedReqBodyExpander\n            }\n        }).afterClosed()\n            .subscribe((data) => {\n                if (data != null) {\n                    if (data.value != null) {\n                        this.requestView.request.body = data.value;\n                        this.selectedReqBodyExpander = data.selectedExpander;\n                    }\n                }\n            });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/mintClient/src/request-body/request-body.component.ts","export { MyLibModule } from './module';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/my-lib/src/index.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MyLibService } from './my-lib.service';\nimport { MyLibComponent } from './my-lib.component';\n\n@NgModule({\n  declarations: [ MyLibComponent ],\n  imports: [ CommonModule ],\n  exports: [ MyLibComponent ],\n  providers: [ MyLibService ]\n})\nexport class MyLibModule {\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/my-lib/src/module.ts","import { Component } from '@angular/core';\n\nimport { MyLibService } from './my-lib.service';\n\n@Component({\n  selector: 'app-my-lib',\n  template: require('./my-lib.component.html'),\n  styles: [ require('./my-lib.component.scss') ]\n})\nexport class MyLibComponent {\n  constructor(public myLibService: MyLibService) {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./src/my-lib/src/my-lib.component.ts","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\nexports.i(require(\"-!../../../node_modules/css-loader/index.js!@angular/material/prebuilt-themes/indigo-pink.css\"), \"\");\n\n// module\nexports.push([module.id, \"/* this file will be extracted to main dist folder and is imported in index.html */\\n/* This file is for setting global styles  */\\nbody {\\n  margin: 0px 0px 0px 0px;\\n  background-color: #f2f4f6; }\\n\\n.content {\\n  background-color: #ffffff; }\\n\\n.content-container {\\n  /*padding-right: 10px;*/\\n  /*padding-left: 10px;*/\\n  padding-bottom: 10px;\\n  margin-right: auto;\\n  margin-left: auto; }\\n\\n@media (max-width: 960px) {\\n  .content-container {\\n    padding-right: 0px;\\n    padding-left: 0px;\\n    margin-right: auto;\\n    margin-left: auto; } }\\n\\n@media (min-width: 600px) {\\n  .content-container {\\n    max-width: 590px; } }\\n\\n@media (min-width: 960px) {\\n  .content-container {\\n    max-width: 950px; } }\\n\\n@media (min-width: 1280px) {\\n  .content-container {\\n    max-width: 1270px; } }\\n\\n@media (min-width: 1920px) {\\n  .content-container {\\n    max-width: 1910px; } }\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./~/sass-loader/lib/loader.js!./src/demo/styles/styles.scss\n// module id = 490\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \".my-lib {\\n  font-size: 32px;\\n  color: red; }\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./~/sass-loader/lib/loader.js!./src/my-lib/src/my-lib.component.scss\n// module id = 491\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/demo/app/app.component.css\n// module id = 492\n// module chunks = 1","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"/*styles for home content only*/\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/demo/app/home/home.component.css\n// module id = 493\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"/*h1 {*/\\n  /*color: #00BCD4;*/\\n/*}*/\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/demo/styles/headings.css\n// module id = 494\n// module chunks = 1","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/mint-client/src/expansions/authorization-basic/authorization-basic.component.css\n// module id = 495\n// module chunks = 1","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \".html-viewer {\\n    min-height: 400px;\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/mint-client/src/expansions/text-html-viewer/text-html-viewer.component.css\n// module id = 496\n// module chunks = 1","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/mint-client/src/expansions/text-plain/text-plain.component.css\n// module id = 497\n// module chunks = 1","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/mint-client/src/expansions/xwww-form-urlencoded/xwww-form-urlencoded.component.css\n// module id = 498\n// module chunks = 1","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/mint-client/src/request-body/request-body.component.css\n// module id = 499\n// module chunks = 1","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/mint-client/src/response-body-basic/response-body-basic.component.css\n// module id = 500\n// module chunks = 1","module.exports = \"<div>\\n  <h1 class=\\\"sample-content\\\">Your Content Here</h1>\\n\\n  <hr>\\n\\n  <h1>{{value}}</h1>\\n  <div>\\n    For hot module reloading run\\n    <pre>npm run start:hmr</pre>\\n  </div>\\n\\n  <hr>\\n\\n  <div>\\n    <h4>Local State</h4>\\n\\n    <form (ngSubmit)=\\\"submitState(localState.value)\\\" autocomplete=\\\"off\\\">\\n\\n      <input\\n        [value]=\\\"localState.value\\\"\\n        (input)=\\\"localState.value = $event.target.value\\\"\\n        placeholder=\\\"Submit Local State to App State\\\"\\n        autofocus>\\n\\n      <button>Submit Value</button>\\n    </form>\\n    <!--\\n        <input type=\\\"text\\\" [value]=\\\"localState.value\\\" (input)=\\\"localState.value = $event.target.value\\\" autofocus>\\n        Rather than wiring up two-way data-binding ourselves with [value] and (input)\\n        we can use Angular's [(ngModel)] syntax\\n        <input type=\\\"text\\\" name=\\\"textInput\\\" [(ngModel)]=\\\"localState.value\\\" autofocus>\\n      -->\\n\\n    <pre>this.localState = {{ localState | json }}</pre>\\n\\n    <app-my-lib></app-my-lib>\\n  </div>\\n\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/app/home/home.component.html\n// module id = 505\n// module chunks = 1","module.exports = \"<h1 mat-dialog-title>{{expanderView.title}}</h1>\\n\\n<div mat-dialog-content>\\n  <mat-select\\n    fxFlex\\n    placeholder=\\\"{{expanderView.name}} select\\\"\\n    [(ngModel)]=\\\"expanderView.selectedExpander\\\">\\n    <mat-option [value]=\\\"\\\">No Select</mat-option>\\n    <mat-option *ngFor=\\\"let expander of expanderView.expanders\\\" [value]=\\\"expander\\\">{{expander.name}}</mat-option>\\n  </mat-select>\\n</div>\\n\\n<div mat-dialog-actions fxLayoutGap=\\\"1em\\\">\\n  <button mat-raised-button color=\\\"accent\\\" [disabled]=\\\"expanderView.selectedExpander == null\\\" (click)=\\\"openBuilder()\\\">Select</button>\\n  <button mat-raised-button (click)=\\\"close()\\\">Cancle</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/builder-dialog/builder-dialog.component.html\n// module id = 506\n// module chunks = 1","module.exports = \"<h1 mat-dialog-title>Basic Auth</h1>\\n\\n<div mat-dialog-content>\\n  <div>\\n    <mat-input-container>\\n      <input mdInput placeholder=\\\"Username\\\" [(ngModel)]=\\\"basicAuthView.username\\\" />\\n    </mat-input-container>\\n  </div>\\n  <div>\\n  <mat-input-container>\\n    <input mdInput placeholder=\\\"Password\\\" [(ngModel)]=\\\"basicAuthView.password\\\" />\\n  </mat-input-container>\\n  </div>\\n</div>\\n\\n<div mat-dialog-actions fxLayoutGap=\\\"1em\\\">\\n  <button mat-raised-button color=\\\"accent\\\" (click)=\\\"apply()\\\">apply</button>\\n  <button mat-raised-button (click)=\\\"close()\\\">cancle</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/expansions/authorization-basic/authorization-basic.component.html\n// module id = 507\n// module chunks = 1","module.exports = \"<div [innerHTML]=\\\"requestView.response.body | safeHtml\\\" class=\\\"html-viewer\\\"></div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/expansions/text-html-viewer/text-html-viewer.component.html\n// module id = 508\n// module chunks = 1","module.exports = \"<h1 mat-dialog-title>Form text/plain</h1>\\n\\n<div mat-dialog-content>\\n  <app-name-values [nameValues]=\\\"formDatas\\\"></app-name-values>\\n</div>\\n\\n<div mat-dialog-actions fxLayoutGap=\\\"1em\\\">\\n  <button mat-raised-button color=\\\"accent\\\" (click)=\\\"apply()\\\">apply</button>\\n  <button mat-raised-button (click)=\\\"close()\\\">cancle</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/expansions/text-plain/text-plain.component.html\n// module id = 509\n// module chunks = 1","module.exports = \"<h1 mat-dialog-title>Form xwww-form-urlencoded</h1>\\n\\n<div mat-dialog-content>\\n  <app-name-values [nameValues]=\\\"formDatas\\\"></app-name-values>\\n</div>\\n\\n<div mat-dialog-actions fxLayoutGap=\\\"1em\\\">\\n  <button mat-raised-button color=\\\"accent\\\" (click)=\\\"apply()\\\">apply</button>\\n  <button mat-raised-button (click)=\\\"close()\\\">cancle</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/expansions/xwww-form-urlencoded/xwww-form-urlencoded.component.html\n// module id = 510\n// module chunks = 1","module.exports = \"<mat-tab-group dynamicHeight=\\\"true\\\" [selectedIndex]=\\\"selectedIndex\\\">\\n\\t<mat-tab *ngFor=\\\"let requestView of requestViews; index as i\\\">\\n\\t\\t<ng-template mat-tab-label>\\n\\t\\t\\t<div>\\n\\t\\t\\t\\t{{requestView.title}}\\n\\t\\t\\t\\t<button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\">\\n\\t\\t\\t\\t\\t<mat-icon>more_vert</mat-icon>\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t<mat-menu #menu=\\\"matMenu\\\">\\n\\t\\t\\t\\t\\t<button mat-menu-item (click)=\\\"duplicateClient(i)\\\">\\n\\t\\t\\t\\t\\t\\t<mat-icon>content_copy</mat-icon>\\n\\t\\t\\t\\t\\t\\t<span>Duplicate</span>\\n\\t\\t\\t\\t\\t\\t{{menu.menu}}\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t<button mat-menu-item (click)=\\\"closeClient(i)\\\" *ngIf=\\\"requestViews.length > 1\\\">\\n\\t\\t\\t\\t\\t\\t<mat-icon>close</mat-icon>\\n\\t\\t\\t\\t\\t\\t<span>Close</span>\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t</mat-menu>\\n\\t\\t\\t</div>\\n\\t\\t</ng-template>\\n\\t\\t<div fxLayout=\\\"column\\\" style=\\\"padding: 0.5em 1em 0.5em 1em\\\">\\n\\t\\t\\t<app-http-client [requestView]=\\\"requestView\\\" [requestExpansions]=\\\"requestExpansions\\\"></app-http-client>\\n\\t\\t</div>\\n\\t</mat-tab>\\n</mat-tab-group>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/http-client-tab/http-client-tab.component.html\n// module id = 511\n// module chunks = 1","module.exports = \"<app-http-request\\n  [requestView]=\\\"requestView\\\"\\n  [requestExpansions]=\\\"requestExpansions\\\"\\n  [httpResponse]=\\\"httpResponse\\\"></app-http-request>\\n\\n<app-http-response [requestView]=\\\"requestView\\\" [requestExpansions]=\\\"requestExpansions\\\"></app-http-response>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/http-client/http-client.component.html\n// module id = 512\n// module chunks = 1","module.exports = \"<div fxLayout=\\\"column\\\">\\n  <div fxLayoutGap=\\\"0.5em\\\" fxLayout.gt-sm=\\\"row\\\" fxLayout=\\\"column\\\"\\n       fxLayoutAlign.gt-sm=\\\" center\\\">\\n    <mat-form-field>\\n      <mat-select [(ngModel)]=\\\"requestView.request.method\\\" placeholder=\\\"request method\\\">\\n        <mat-option *ngFor=\\\"let method of httpMethods\\\" [value]=\\\"method\\\">{{method}}</mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n    <mat-form-field fxFlex fxFlexFill>\\n      <!-- <input\\n        mdInput\\n        [(ngModel)]=\\\"requestView.requestUrl\\\"\\n        (keyup)=\\\"findParams($event)\\\"\\n        placeholder=\\\"Request URL\\\"\\n        mdTooltip=\\\"reuqest url에서 property holder 를 {...}와 같은 형식으로 사용할 수 있습니다.\\\" /> -->\\n      <textarea matInput\\n                matTextareaAutosize\\n                [(ngModel)]=\\\"requestView.requestUrl\\\"\\n                (keyup)=\\\"findParams($event)\\\"\\n                placeholder=\\\"Request URL\\\"\\n                matTooltip=\\\"reuqest url에서 property holder 를 {...}와 같은 형식으로 사용할 수 있습니다.\\\"></textarea>\\n    </mat-form-field>\\n    <button mat-button (click)=\\\"requestView.isOpenParams = !requestView.isOpenParams\\\" [disabled]=\\\"requestView.requestStatus == RequestStatus.Sending\\\">\\n      Params\\n      <mat-icon *ngIf=\\\"requestView.isOpenParams\\\">expand_less</mat-icon>\\n      <mat-icon *ngIf=\\\"!requestView.isOpenParams\\\">expand_more</mat-icon>\\n    </button>\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"send()\\\" [disabled]=\\\"requestView.requestStatus == RequestStatus.Sending\\\">Send</button>\\n  </div>\\n  <div style=\\\"background-color: #f2f4f6; padding: 0.5em\\\" *ngIf=\\\"requestView.isOpenParams\\\">\\n\\n    <mat-tab-group [selectedIndex]=\\\"requestView.paramTebSelectedIndex\\\">\\n      <mat-tab>\\n        <ng-template mat-tab-label>\\n          Query\\n          <span *ngIf=\\\"requestView.request.queryParams.length > 1\\\">\\n            ({{requestView.request.queryParams.length - 1}})\\n          </span>\\n        </ng-template>\\n        <div style=\\\"padding: 0.5em\\\">\\n          <app-name-values [nameValues]=\\\"requestView.request.queryParams\\\" [nameValueBuilders]=\\\"queryParamBuilders\\\"></app-name-values>\\n        </div>\\n      </mat-tab>\\n      <mat-tab>\\n        <ng-template mat-tab-label>\\n          Url\\n          <span *ngIf=\\\"requestView.request.urlParams.length > 1\\\">\\n            ({{requestView.request.urlParams.length - 1}})\\n          </span>\\n        </ng-template>\\n        <div style=\\\"padding: 0.5em\\\">\\n          <app-name-values [nameValues]=\\\"requestView.request.urlParams\\\" [nameValueBuilders]=\\\"urlParamBuilders\\\"></app-name-values>\\n        </div>\\n      </mat-tab>\\n    </mat-tab-group>\\n  </div>\\n\\n  <mat-tab-group>\\n    <mat-tab>\\n      <ng-template mat-tab-label>\\n        <span fxLayoutAlign=\\\"center center\\\">\\n          Body\\n          <mat-icon *ngIf=\\\"requestView.request.body != '' && requestView.request.body != null\\\">\\n            done\\n          </mat-icon>\\n        </span>\\n      </ng-template>\\n      <div fxLayoutGap=\\\"1em\\\" fxLayout=\\\"column\\\" style=\\\"padding: 1em 0.5em 0.5em;\\\">\\n        <app-request-body [requestView]=\\\"requestView\\\" [reqBodyBuilders]=\\\"reqBodyBuilders\\\"></app-request-body>\\n      </div>\\n    </mat-tab>\\n    <mat-tab>\\n      <ng-template mat-tab-label>\\n        Headers\\n        <span *ngIf=\\\"requestView.request.headers.length > 1\\\">\\n          ({{requestView.request.headers.length - 1}})\\n        </span>\\n      </ng-template>\\n      <div style=\\\"padding: 0.5em\\\">\\n        <app-name-values [nameValues]=\\\"requestView.request.headers\\\" [nameValueBuilders]=\\\"headerBuilders\\\"></app-name-values>\\n      </div>\\n    </mat-tab>\\n  </mat-tab-group>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/http-request/http-request.component.html\n// module id = 513\n// module chunks = 1","module.exports = \"<p *ngIf=\\\"requestView.requestStatus == RequestStatus.PreSend\\\">\\n  please hit the\\n  <button mat-raised-button color=\\\"primary\\\">Send</button>\\n  button to get a response\\n</p>\\n\\n<div *ngIf=\\\"requestView.requestStatus == RequestStatus.SendFail\\\">\\n  <h2>Could not get any response</h2>\\n  There was an error connecting to <a href=\\\"{{requestView.request.url}}\\\">{{requestView.request.url}}</a>\\n</div>\\n\\n<div *ngIf=\\\"requestView.requestStatus == RequestStatus.Sending\\\">\\n  <h1>\\n    Sending... <button mat-raised-button>Cancel...</button>\\n  </h1>\\n  <mat-progress-bar mode=\\\"indeterminate\\\"></mat-progress-bar>\\n</div>\\n\\n<div *ngIf=\\\"requestView.requestStatus == RequestStatus.SendSuccess\\\" fxLayout=\\\"column\\\" fxLayoutGap=\\\"1em\\\">\\n  <b>Response</b>\\n  <mat-toolbar>\\n    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"1em\\\">\\n      <span>\\n        <b>Status: </b> {{requestView.response.status}} {{requestView.response.statusText}}\\n      </span>\\n      <span>\\n        <b>elapse time: </b> {{requestView.response.elapseTime | number}} ms\\n      </span>\\n    </div>\\n  </mat-toolbar>\\n\\n  <mat-tab-group dynamicHeight=\\\"true\\\">\\n    <mat-tab>\\n      <ng-template mat-tab-label>\\n        <span fxLayoutAlign=\\\"center center\\\">\\n          Body\\n          <mat-icon *ngIf=\\\"requestView.response.body != '' && requestView.response.body != null\\\">\\n            done\\n          </mat-icon>\\n        </span>\\n      </ng-template>\\n\\n      <div fxLayoutGap=\\\"1em\\\" fxLayout=\\\"column\\\" style=\\\"padding: 0.5em;\\\">\\n        <mat-radio-group *ngIf=\\\"matchedResBodyViewers.length > 1\\\"\\n          fxLayoutGap=\\\"1em\\\"\\n          [(ngModel)]=\\\"selectedBodyViewer\\\">\\n          <mat-radio-button [value]=\\\"resBodyVeiwer\\\" *ngFor=\\\"let resBodyVeiwer of matchedResBodyViewers\\\">{{resBodyVeiwer.name}}</mat-radio-button>\\n        </mat-radio-group>\\n\\n        <div\\n          *ngFor=\\\"let resBodyVeiwer of matchedResBodyViewers\\\"\\n          [hidden]=\\\"selectedBodyViewer != resBodyVeiwer\\\">\\n          <ng-template body-viewer-host\\n            [bodyViewer]=\\\"resBodyVeiwer\\\" [requestView]=\\\"requestView\\\"></ng-template>\\n        </div>\\n      </div>\\n    </mat-tab>\\n    <mat-tab>\\n      <ng-template mat-tab-label>\\n        Headers ({{requestView.response.headers.length}})\\n      </ng-template>\\n      <div style=\\\"padding: 0.5em\\\">\\n        <p *ngFor=\\\"let header of requestView.response.headers\\\">\\n          <b>{{header.name}}</b>: {{header.value}}\\n        </p>\\n      </div>\\n    </mat-tab>\\n  </mat-tab-group>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/http-response/http-response.component.html\n// module id = 514\n// module chunks = 1","module.exports = \"<div fxLayoutGap=\\\"1em\\\" fxLayout=\\\"row\\\"\\n  *ngFor=\\\"let nameValue of nameValues; index as i\\\"\\n  (mouseenter)=\\\"nameValue.showCloseButton = true\\\"\\n  (mouseleave)=\\\"nameValue.showCloseButton = false\\\">\\n  <div fxLayoutGap=\\\"1em\\\" fxLayout=\\\"row\\\" fxFlex>\\n    <mat-form-field fxFlex=\\\"30\\\">\\n      <input matInput placeholder=\\\"Name\\\" [(ngModel)]=\\\"nameValue.name\\\"\\n        [style.text-decoration]=\\\"!nameValue.enabled ? ' line-through' : ''\\\"\\n        [style.color]=\\\"!nameValue.enabled ? 'gray' : 'black'\\\"\\n        (focus)=\\\"addNameValue(i)\\\"\\n        (keyup)=\\\"addNameValue(i);findBuilder(i)\\\"\\n        (blur)=\\\"optimize()\\\" />\\n    </mat-form-field>\\n    <mat-form-field fxFlex>\\n      <!-- <input mdInput placeholder=\\\"Value\\\" [(ngModel)]=\\\"nameValue.value\\\"\\n      [style.text-decoration]=\\\"!nameValue.enabled ? ' line-through' : ''\\\"\\n      (focus)=\\\"addNameValue(i)\\\"\\n      (blur)=\\\"optimize()\\\" /> -->\\n      <textarea matInput\\n        matTextareaAutosize\\n        placeholder=\\\"Value\\\"\\n        [(ngModel)]=\\\"nameValue.value\\\"\\n        [style.text-decoration]=\\\"!nameValue.enabled ? ' line-through' : ''\\\"\\n        [style.color]=\\\"!nameValue.enabled ? 'gray' : 'black'\\\"\\n        (focus)=\\\"addNameValue(i)\\\"\\n        (blur)=\\\"optimize()\\\"></textarea>\\n    </mat-form-field>\\n  </div>\\n  <!--<div>\\n    <span fxFlex=\\\"30\\\">{{}}\\n  </div>-->\\n  <div fxFlexAlign=\\\"center\\\">\\n    <button mat-raised-button color=\\\"accent\\\" *ngIf=\\\"nameValue.enableBuilder\\\" (click)=\\\"openBuilder(i)\\\">Build</button>\\n\\n    <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\">\\n      <mat-icon>more_vert</mat-icon>\\n    </button>\\n    <mat-menu #menu=\\\"matMenu\\\">\\n      <button mat-menu-item (click)=\\\"disabled(i)\\\" *ngIf=\\\"nameValue.enabled\\\">\\n        <mat-icon>block</mat-icon>\\n        <span>Disable</span>\\n        {{menu.menu}}\\n      </button>\\n      <button mat-menu-item (click)=\\\"enabled(i)\\\" *ngIf=\\\"!nameValue.enabled\\\">\\n        <mat-icon>redo</mat-icon>\\n        <span>Enable</span>\\n        {{menu.menu}}\\n      </button>\\n      <button mat-menu-item (click)=\\\"remove(i)\\\" *ngIf=\\\"nameValues.length > 1\\\">\\n        <mat-icon>close</mat-icon>\\n        <span>Remove</span>\\n      </button>\\n    </mat-menu>\\n  </div>\\n  <!--<div fxFlexAlign=\\\"center\\\" *ngIf=\\\"nameValue.showCloseButton && nameValues.length > 1\\\">\\n    <button mat-icon-button (click)=\\\"remove(i)\\\">\\n      <mat-icon>clear</mat-icon>\\n    </button>\\n  </div>-->\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/name-values/name-values.component.html\n// module id = 515\n// module chunks = 1","module.exports = \"<div fxLayout=\\\"column\\\">\\n  <div fxLayoutGap=\\\"0.5em\\\" fxLayoutAlign=\\\"start center\\\">\\n    <mat-checkbox [(ngModel)]=\\\"requestView.reqBodyWrap\\\">Wrap</mat-checkbox>\\n    <mat-form-field>\\n      <mat-select [(ngModel)]=\\\"requestView.reqDisplayMode\\\" placeholder=\\\"Syntax\\\">\\n        <mat-option *ngFor=\\\"let method of displayModes\\\" [value]=\\\"method\\\">{{method}}</mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n    <mat-form-field>\\n      <mat-select\\n              [(ngModel)]=\\\"requestView.reqContentType\\\"\\n              (change)=\\\"onChangeRequestBodyContentType()\\\"\\n              placeholder=\\\"Content type\\\">\\n        <mat-option>None</mat-option>\\n        <mat-option *ngFor=\\\"let type of contentTypes\\\" [value]=\\\"type\\\">{{type}}</mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n    <button mat-raised-button color=\\\"accent\\\" *ngIf=\\\"requestView.enableReqBodyBuilder\\\" (click)=\\\"openReqBodyBuilder()\\\">Build</button>\\n  </div>\\n  <div ace-editor\\n    [text]=\\\"requestView.request.body\\\"\\n    [mode]=\\\"requestView.reqDisplayMode\\\"\\n    [theme]=\\\"'dawn'\\\"\\n    [options]=\\\"{\\n      minLines: 10,\\n      maxLines: '100',\\n      showPrintMargin: false,\\n      wrap: requestView.reqBodyWrap\\n    }\\\"\\n    (textChanged)=\\\"onChange($event)\\\"\\n    style=\\\"display: block; width: 100%; height: 20vh;\\\"></div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/request-body/request-body.component.html\n// module id = 516\n// module chunks = 1","module.exports = \"<div fxLayoutGap=\\\"0.5em\\\" fxLayoutAlign=\\\"start center\\\">\\n  <mat-checkbox [(ngModel)]=\\\"requestView.resBodyWrap\\\">Wrap</mat-checkbox>\\n  <mat-form-field>\\n    <mat-select [(ngModel)]=\\\"requestView.resDisplayMode\\\" placeholder=\\\"Syntax\\\">\\n      <mat-option *ngFor=\\\"let method of displayModes\\\" [value]=\\\"method\\\">{{method}}</mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n  <mat-checkbox [(ngModel)]=\\\"requestView.resBodyFormat\\\" (change)=\\\"onChangeFormat()\\\">Format</mat-checkbox>\\n</div>\\n\\n<div ace-editor\\n  [text]=\\\"displayResBody\\\"\\n  [mode]=\\\"requestView.resDisplayMode\\\"\\n  [theme]=\\\"'dawn'\\\"\\n  [readOnly]=\\\"true\\\"\\n  [options]=\\\"{\\n      minLines: 10,\\n      maxLines: 'Infinity',\\n      showPrintMargin: false,\\n      wrap: requestView.resBodyWrap\\n  }\\\"\\n  style=\\\"display: block; width: 100%; height: 100%\\\"></div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/response-body-basic/response-body-basic.component.html\n// module id = 517\n// module chunks = 1","module.exports = \"<span class=\\\"my-lib\\\">{{myLibService.myLib}}</span>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/my-lib/src/my-lib.component.html\n// module id = 518\n// module chunks = 1","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./styles.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./styles.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./styles.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/styles/styles.scss\n// module id = 629\n// module chunks = 1","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js!./headings.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!./headings.css\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!./headings.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/styles/headings.css\n// module id = 630\n// module chunks = 1","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./my-lib.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/my-lib/src/my-lib.component.scss\n// module id = 632\n// module chunks = 1","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./app.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/app/app.component.css\n// module id = 633\n// module chunks = 1","\n        var result = require(\"!!../../../../node_modules/css-loader/index.js!./home.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/app/home/home.component.css\n// module id = 634\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/css-loader/index.js!./authorization-basic.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/expansions/authorization-basic/authorization-basic.component.css\n// module id = 635\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/css-loader/index.js!./text-html-viewer.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/expansions/text-html-viewer/text-html-viewer.component.css\n// module id = 636\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/css-loader/index.js!./text-plain.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/expansions/text-plain/text-plain.component.css\n// module id = 637\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/css-loader/index.js!./xwww-form-urlencoded.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/expansions/xwww-form-urlencoded/xwww-form-urlencoded.component.css\n// module id = 638\n// module chunks = 1","\n        var result = require(\"!!../../../../node_modules/css-loader/index.js!./request-body.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/request-body/request-body.component.css\n// module id = 639\n// module chunks = 1","\n        var result = require(\"!!../../../../node_modules/css-loader/index.js!./response-body-basic.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mint-client/src/response-body-basic/response-body-basic.component.css\n// module id = 640\n// module chunks = 1"],"mappings":";A;;;;;;;;;;;;;;AAAA;AAIA;AAGA;AADA;AAGA;AAoCA;AA/BA;AAHA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AANA;AAQA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AArCA;AADA;AACA;AAsCA;AAAA;AAtCA;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAOA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA1CA;AAJA;AACA;AACA;AACA;AAOA;AAFA;AACA;AALA;AA2CA;AAAA;AA3CA;AA6CA;AAAA;AAIA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AAEA;AAKA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AALA;AAHA;AACA;AACA;AAEA;AADA;AAMA;AAAA;AANA;AAaA;AAGA;AAAA;AAEA;AACA;AALA;AAAA;AAAA;AAAA;AADA;AALA;AACA;AACA;AACA;AACA;;AACA;AAQA;AAAA;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AAKA;AAIA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAHA;AACA;AACA;AAKA;AACA;AALA;AAeA;AAAA;AAfA;AAqBA;AAeA;AAAA;AAdA;AAeA;AAEA;AACA;AAEA;AACA;AAEA;;;;AAIA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AA7EA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAGA;AADA;AACA;AAAA;AAPA;AAJA;AACA;AACA;AACA;AAgBA;AAfA;AAiFA;AAAA;AAjFA;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AAIA;AAIA;;AAEA;AACA;AAMA;;;AAGA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAOA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;ACxEA;AAGA;AAgBA;AAAA;AAQA;AAHA;AACA;AACA;AAJA;AADA;AACA;AAAA;AAHA;AAdA;AACA;AACA;AACA;AACA;AASA;AACA;AAQA;AAAA;AARA;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAUA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AATA;AARA;AACA;AACA;AAKA;;AACA;AAWA;AAAA;AAXA;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AAcA;AAZA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAOA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAxBA;AALA;AACA;AACA;AACA;AACA;AAMA;AADA;AAJA;AAyBA;AAAA;AAzBA;AA2BA;AAAA;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AAOA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA/BA;AALA;AACA;AACA;AACA;AACA;AAOA;AADA;AALA;AAgCA;AAAA;AAhCA;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AAOA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA/BA;AALA;AACA;AACA;AACA;AACA;AAOA;AADA;AALA;AAgCA;AAAA;AAhCA;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AAEA;AAEA;AAOA;AAgBA;AACA;AAAA;AAdA;AAGA;;AAEA;AACA;AAEA;;AAEA;AACA;AAIA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAtIA;AAAA;AAAA;AAAA;AADA;AALA;AACA;AACA;AAEA;AAkBA;AAjBA;AAwIA;AAAA;AAxIA;;;;;;;;;ACRA;AAAA;AAAA;;;;;;;AAOA;AACA;AAAA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;AC9CA;AAEA;AAOA;AASA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AA9FA;AAAA;AAAA;AAAA;AADA;AALA;AACA;AACA;AACA;AACA;;AACA;AAgGA;AAAA;AAhGA;;;;;;;;;;;;;;;;;ACTA;AAGA;AADA;AAEA;AACA;AAFA;AADA;AACA;AAEA;AAAA;AAFA;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;;;AAGA;AACA;AAiDA;AArCA;;;;AAIA;AACA;AAEA;;;;AAIA;AACA;AAUA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAAA;;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;;AAEA;AAAA;AAIA;AAGA;AAAA;AAAA;;AAEA;AAsBA;AAFA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;AAEA;AAAA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;;AAGA;AACA;AACA;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AAAA;AAAA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;ACHA;;AAEA;AACA;AAKA;AAEA;;;AAGA;AAcA;AAKA;AACA;AALA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAXA;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AANA;AAaA;AAAA;AAbA;AAeA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AAIA;AAKA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAwCA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAvDA;AAvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAHA;AAyDA;AAAA;AAzDA;;;;;;;;;;;;;;;;;;;;;;AChGA;AACA;AACA;AAGA;AAAA;AAIA;AAHA;AACA;AACA;AAHA;AADA;AACA;AAIA;AAAA;AAJA;AAMA;;AAEA;AACA;AACA;AACA;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;ACfA;AAgBA;AAEA;AAAA;AAEA;AACA;AALA;AAdA;AACA;AACA;AAWA;;AACA;AAOA;AAAA;AAPA;;;;;;;;;;;;;;;;;AChBA;AAOA;AAAA;AAEA;AAFA;AALA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAFA;;;;;;;;;;;;;;;;;;;;;ACPA;AAKA;AAeA;AAOA;;AAEA;AACA;AACA;AARA;;AAEA;AACA;AAMA;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAzBA;AAZA;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAYA;AAXA;AA0BA;AAAA;AA1BA;;;;;;;;;ACpBA;AAAA;AAAA;;;;;;;;;ACAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACAA;AAUA;AAAA;AAEA;AAFA;AARA;AACA;AACA;AAKA;AACA;AAEA;AAAA;AAFA;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AAGA;AAEA;AACA;AAIA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AApCA;AADA;AAGA;AAFA;AAyDA;AAAA;AAzDA;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AAEA;AACA;AAMA;AAOA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAvBA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AALA;AAJA;AACA;AACA;AACA;;AACA;AA0BA;AAAA;AA1BA;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AAEA;AAEA;AACA;AAQA;AAcA;AAAA;AAAA;AAbA;AAceA;AAdA;AAmMA;AAAA;AAnMA;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAGA;;AAEA;AACA;AAAA;AAeA;AAAA;AAAA;;AAEA;;;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAGA;AAEA;AAAA;AACA;;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;;AAEA;AACA;AAAA;AAeA;AAAA;AAAA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AAIA;AAYA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsDA;AAAA;AACA;AADA;AApDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;AACA;AACA;AAEA;AACA;AAMA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA9GA;AAAA;;AAAA;AAEA;AAAA;AAAA;AAAA;AAHA;AAJA;AACA;AACA;AACA;AAMA;AALA;AAgHA;AAAA;AAhHA;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AAEA;AAQA;AAYA;AAAA;AAFA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAHA;AALA;AACA;AACA;AACA;AACA;AAaA;AAZA;AAsGA;AAAA;AAtGA;;;;;;;;;ACZA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AAQA;AAAA;AAEA;AAFA;AANA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAFA;;;;;;;;;;;;;;;;;;;;;ACZA;AAEA;AAOA;AACA;AAAA;AACA;AAFA;AALA;AACA;AACA;AACA;AACA;AAEA;AADA;AAGA;AAAA;AAHA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}